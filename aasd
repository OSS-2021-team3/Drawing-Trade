[1mdiff --git a/.vscode/launch.json b/.vscode/launch.json[m
[1mnew file mode 100644[m
[1mindex 0000000..d238607[m
[1m--- /dev/null[m
[1m+++ b/.vscode/launch.json[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m{[m
[32m+[m[32m    // IntelliSense를 사용하여 가능한 특성에 대해 알아보세요.[m
[32m+[m[32m    // 기존 특성에 대한 설명을 보려면 가리킵니다.[m
[32m+[m[32m    // 자세한 내용을 보려면 https://go.microsoft.com/fwlink/?linkid=830387을(를) 방문하세요.[m
[32m+[m[32m    "version": "0.2.0",[m
[32m+[m[32m    "configurations": [[m
[32m+[m[32m        {[m
[32m+[m[32m            "name": "Python: Current File",[m
[32m+[m[32m            "type": "python",[m
[32m+[m[32m            "request": "launch",[m
[32m+[m[32m            "program": "${file}",[m
[32m+[m[32m            "console": "integratedTerminal"[m
[32m+[m[32m        }[m
[32m+[m[32m    ][m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/.vscode/tasks.json b/.vscode/tasks.json[m
[1mnew file mode 100644[m
[1mindex 0000000..abeec05[m
[1m--- /dev/null[m
[1m+++ b/.vscode/tasks.json[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m{[m
[32m+[m[32m    // See https://go.microsoft.com/fwlink/?LinkId=733558[m
[32m+[m[32m    // for the documentation about the tasks.json format[m
[32m+[m[32m    "version": "2.0.0",[m
[32m+[m[32m    "tasks": [[m
[32m+[m[32m        {[m
[32m+[m[32m            "label": "build python",[m
[32m+[m[32m            "type": "shell",[m
[32m+[m[32m            "command": "python",[m
[32m+[m[32m            "args": [[m
[32m+[m[32m                "${file}"[m
[32m+[m[32m            ],[m
[32m+[m[32m            "group":{[m
[32m+[m[32m                "kind": "build",[m
[32m+[m[32m                "isDefault": true[m
[32m+[m[32m            },[m
[32m+[m[32m            "presentation": {[m
[32m+[m[32m                "echo": true,[m
[32m+[m[32m                "reveal": "always",[m
[32m+[m[32m                "focus": false,[m
[32m+[m[32m                "panel": "shared",[m
[32m+[m[32m                "showReuseMessage": true,[m
[32m+[m[32m                "clear": true[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    ][m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/MatchingTest.py b/MatchingTest.py[m
[1mdeleted file mode 100644[m
[1mindex 875feb9..0000000[m
[1m--- a/MatchingTest.py[m
[1m+++ /dev/null[m
[36m@@ -1,16 +0,0 @@[m
[31m-from typing import List[m
[31m-from AverageHashMatching import AverageHashMatching[m
[31m-import cv2[m
[31m-[m
[31m-path = 'C:/Users/great/images/'[m
[31m-original = cv2.imread(path + 'original.png')[m
[31m-graph1 = cv2.imread(path + 'graph1.png')[m
[31m-graph2 = cv2.imread(path + 'graph2.png')[m
[31m-graph3 = cv2.imread(path + 'graph3.png')[m
[31m-graph4 = cv2.imread(path + 'graph4.png')[m
[31m-graph5 = cv2.imread(path + 'graph5.png')[m
[31m-[m
[31m-graphs = [graph1,graph2,graph3,graph4,graph5][m
[31m-[m
[31m-for i in range(0,5):[m
[31m-    print('%d 번째 그래프와 원본의 유사도 : %f' %(i+1,AverageHashMatching(original,graphs[i])))[m
[1mdiff --git a/__pycache__/AverageHashMatching.cpython-39.pyc b/__pycache__/AverageHashMatching.cpython-39.pyc[m
[1mindex db3af85..5a37845 100644[m
Binary files a/__pycache__/AverageHashMatching.cpython-39.pyc and b/__pycache__/AverageHashMatching.cpython-39.pyc differ
[1mdiff --git a/AverageHashMatching.py b/codes/AverageHashMatching.py[m
[1msimilarity index 95%[m
[1mrename from AverageHashMatching.py[m
[1mrename to codes/AverageHashMatching.py[m
[1mindex dcc11f7..8c3e230 100644[m
[1m--- a/AverageHashMatching.py[m
[1m+++ b/codes/AverageHashMatching.py[m
[36m@@ -1,28 +1,28 @@[m
[31m-import cv2[m
[31m-[m
[31m-# 이미지를 32x32크기의 평균 해쉬로 변환[m
[31m-def img2hash(img):[m
[31m-    thresh = 127[m
[31m-    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)[m
[31m-    gray = cv2.resize(gray, (256, 256))[m
[31m-    ret,gray = cv2.threshold(gray,thresh,255,cv2.THRESH_BINARY)[m
[31m-    avg = gray.mean()[m
[31m-    bi = 1 * (gray > avg)[m
[31m-    return bi[m
[31m-[m
[31m-# hamming distance 구하기[m
[31m-def hamming_distance(a, b):[m
[31m-    a = a.reshape(1,-1)[m
[31m-    b = b.reshape(1,-1)[m
[31m-    # 같은 자리의 값이 서로 다른 것들의 합[m
[31m-    distance = (a !=b).sum()[m
[31m-    return distance[m
[31m-[m
[31m-# 이미지 HashMathcing, 0~1사이의 float값 리턴[m
[31m-# 이미지를 binary형태로 만들고 hamming distance 값 구하는거 [m
[31m-# 0에 가까울 수록 (값이 작을 수록) 비슷한거임[m
[31m-def AverageHashMatching(img1,img2):[m
[31m-    img1_hash = img2hash(img1)[m
[31m-    img2_hash = img2hash(img2)[m
[31m-    dst = hamming_distance(img1_hash,img2_hash)/(256*256)[m
[32m+[m[32mimport cv2[m
[32m+[m
[32m+[m[32m# 이미지를 32x32크기의 평균 해쉬로 변환[m
[32m+[m[32mdef img2hash(img):[m
[32m+[m[32m    thresh = 127[m
[32m+[m[32m    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)[m
[32m+[m[32m    gray = cv2.resize(gray, (256, 256))[m
[32m+[m[32m    ret,gray = cv2.threshold(gray,thresh,255,cv2.THRESH_BINARY)[m
[32m+[m[32m    avg = gray.mean()[m
[32m+[m[32m    bi = 1 * (gray > avg)[m
[32m+[m[32m    return bi[m
[32m+[m
[32m+[m[32m# hamming distance 구하기[m
[32m+[m[32mdef hamming_distance(a, b):[m
[32m+[m[32m    a = a.reshape(1,-1)[m
[32m+[m[32m    b = b.reshape(1,-1)[m
[32m+[m[32m    # 같은 자리의 값이 서로 다른 것들의 합[m
[32m+[m[32m    distance = (a !=b).sum()[m
[32m+[m[32m    return distance[m
[32m+[m
[32m+[m[32m# 이미지 HashMathcing, 0~1사이의 float값 리턴[m
[32m+[m[32m# 이미지를 binary형태로 만들고 hamming distance 값 구하는거[m[41m [m
[32m+[m[32m# 0에 가까울 수록 (값이 작을 수록) 비슷한거임[m
[32m+[m[32mdef AverageHashMatching(img1,img2):[m
[32m+[m[32m    img1_hash = img2hash(img1)[m
[32m+[m[32m    img2_hash = img2hash(img2)[m
[32m+[m[32m    dst = hamming_distance(img1_hash,img2_hash)/(256*256)[m
     return dst[m
\ No newline at end of file[m
[1mdiff --git a/codes/MatchingTest.py b/codes/MatchingTest.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1d516bb[m
[1m--- /dev/null[m
[1m+++ b/codes/MatchingTest.py[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mfrom mkList import mkList[m
[32m+[m[32mimport cv2[m
[32m+[m
[32m+[m[32m# coin price datas path[m
[32m+[m[32mdata_path = "./datas/"[m
[32m+[m[32mextension = ".png"[m
[32m+[m
[32m+[m[32m# img to match[m
[32m+[m[32moriginal = cv2.imread('original.png')[m
[32m+[m
[32m+[m[32m# user_img, algorithm number, data_path[m
[32m+[m[32mlist  = mkList(original,1)[m
[32m+[m
[32m+[m[32m# list up to 3[m[41m [m
[32m+[m[32mgraph1 = cv2.imread(data_path+list[0][0]+extension)[m
[32m+[m[32mgraph2 = cv2.imread(data_path+list[1][0]+extension)[m
[32m+[m[32mgraph3 = cv2.imread(data_path+list[2][0]+extension)[m
[32m+[m
[32m+[m[32m# display up to 3[m
[32m+[m[32mcv2.imshow("first "+list[0][0], graph1)[m
[32m+[m[32mcv2.imshow("second "+list[1][0],graph2)[m
[32m+[m[32mcv2.imshow("third "+list[2][0],graph3)[m
[32m+[m[32mcv2.imshow("origin",original)[m
[32m+[m[32mcv2.waitKey()[m
[32m+[m[32mcv2.destroyAllWindows()[m
\ No newline at end of file[m
[1mdiff --git a/SortImage.py b/codes/SortImage.py[m
[1msimilarity index 100%[m
[1mrename from SortImage.py[m
[1mrename to codes/SortImage.py[m
[1mdiff --git a/codes/crawler.py b/codes/crawler.py[m
[1mnew file mode 100644[m
[1mindex 0000000..f7f32a7[m
[1m--- /dev/null[m
[1m+++ b/codes/crawler.py[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mimport pyupbit[m
[32m+[m[32mimport matplotlib.pyplot as plt[m
[32m+[m[32mimport os[m
[32m+[m
[32m+[m[32m# default interval = 60[m
[32m+[m[32mdef carwl(data_path):[m
[